#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° RC Design
"""

import sys
import os
from datetime import datetime

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö import ‡πÇ‡∏°‡∏î‡∏π‡∏•
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_markdown_report_symbols():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô Markdown"""
    print("=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πà‡∏ß‡∏¢ ===")
    print(f"‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
        test_results = {
            'B': 300,
            'D': 500,
            'd': 450,
            'fc': 280,
            'fy': 4000,
            'main_rebar': '#5(D16)',
            'main_num': 4,
            'comp_rebar': '#4(D13)',
            'comp_num': 2,
            'stirrup': '#3(D10)',
            'stirrup_type': '‡πÄ‡∏´‡∏•‡πá‡∏Å‡∏õ‡∏•‡∏≠‡∏Å‡∏™‡∏≠‡∏á‡∏Ç‡∏≤',
            'stirrup_spacing': 150,
            'Mu': 15.0,
            'Vu': 8.0,
            'As': 7.92,
            'Ass': 2.53,
            'Av': 1.427,
            'beta': 0.850,
            'c': 5.41,
            'es': 0.021555,
            'et': 0.021555,
            'phi': 0.900,
            'Cc': 32.812,
            'Cs': -1.123,
            'Mn': 13.33,
            'phiMn': 12.00,
            'Vc': 11.774,
            'phiVn': 21.46,
            's_max': 225,
            'moment_adequate': False,
            'shear_adequate': True,
            'spacing_adequate': True,
            'moment_ratio': 0.80,
            'shear_ratio': 2.68,
            'result0': '‡πÄ‡∏´‡∏•‡πá‡∏Å‡∏£‡∏±‡∏ö‡πÅ‡∏£‡∏á‡∏≠‡∏±‡∏î‡πÑ‡∏°‡πà‡∏¢‡∏≠‡∏°',
            'result1': '‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏£‡∏á‡∏î‡∏∂‡∏á'
        }
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô generate_markdown_report
        from demo_improved_gui import generate_markdown_report
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô Markdown ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô Markdown...")
        markdown_report = generate_markdown_report(test_results)
        
        if markdown_report:
            print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô Markdown ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
            symbols_to_check = [
                ('Œ≤1', '‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå Œ≤1'),
                ('‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡πÄ‡∏´‡∏•‡πá‡∏Å‡∏£‡∏±‡∏ö‡πÅ‡∏£‡∏á‡∏î‡∏∂‡∏á', '‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ Œµs'),
                ('‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î', '‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ Œµt'),
                ('‡∏ï‡∏±‡∏ô-‡πÄ‡∏°‡∏ï‡∏£', '‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå'),
                ('‡∏ï‡∏±‡∏ô', '‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÅ‡∏£‡∏á'),
                ('‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì‡∏•‡∏î‡∏Å‡∏≥‡∏•‡∏±‡∏á', '‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ œÜ')
            ]
            
            print("\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πà‡∏ß‡∏¢:")
            for symbol, description in symbols_to_check:
                if symbol in markdown_report:
                    print(f"  ‚úÖ {description}: ‡∏û‡∏ö '{symbol}'")
                else:
                    print(f"  ‚ùå {description}: ‡πÑ‡∏°‡πà‡∏û‡∏ö '{symbol}'")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ
            old_symbols = [
                ('Œ≤‚ÇÅ', '‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå Œ≤‚ÇÅ ‡πÄ‡∏Å‡πà‡∏≤'),
                ('Œµs =', '‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå Œµs ‡πÄ‡∏Å‡πà‡∏≤'),
                ('Œµt =', '‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå Œµt ‡πÄ‡∏Å‡πà‡∏≤'),
                ('tf-m', '‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏Å‡πà‡∏≤ tf-m'),
                ('tf', '‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏Å‡πà‡∏≤ tf (‡πÅ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å tf-m)')
            ]
            
            print("\nüö´ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ:")
            for old_symbol, description in old_symbols:
                if old_symbol in markdown_report:
                    print(f"  ‚ö†Ô∏è {description}: ‡∏¢‡∏±‡∏á‡∏û‡∏ö '{old_symbol}' ‡∏≠‡∏¢‡∏π‡πà")
                else:
                    print(f"  ‚úÖ {description}: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
            test_file = f"test_markdown_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
            with open(test_file, 'w', encoding='utf-8') as f:
                f.write(markdown_report)
            
            print(f"\nüìÑ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà: {test_file}")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
            print("\nüìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô (500 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏£‡∏Å):")
            print("-" * 60)
            print(markdown_report[:500])
            print("...")
            print("-" * 60)
            
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô Markdown ‡πÑ‡∏î‡πâ")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö UI validation
        print("\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ validation ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà:")
        from ui_rc_recbeamcal_improved import ModernInputValidator
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ validate loading
        test_cases = [
            (15.0, 8.0, True, "‡∏Ñ‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥"),
            (10000, 5000, True, "‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ"),
            (10001, 5001, False, "‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î")
        ]
        
        for moment, shear, expected, description in test_cases:
            is_valid, message = ModernInputValidator.validate_loading(str(moment), str(shear))
            status = "‚úÖ" if is_valid == expected else "‚ùå"
            print(f"  {status} {description}: moment={moment}, shear={shear}")
            if not is_valid:
                print(f"      ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {message}")
        
        print("\nüéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
        print("  ‚úÖ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        print("  ‚úÖ ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠‡∏ó‡∏±‡πà‡∏ß‡∏£‡∏∞‡∏ö‡∏ö")
        print("  ‚úÖ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô Markdown ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        print("  ‚úÖ ‡∏Å‡∏≤‡∏£ validation ‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        import traceback
        print(traceback.format_exc())
    
    print("\n=== ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ===")

if __name__ == "__main__":
    test_markdown_report_symbols()
