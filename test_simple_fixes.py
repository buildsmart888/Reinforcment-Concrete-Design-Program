#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ GUI)
"""

import sys
import os
from datetime import datetime

def test_symbol_fixes():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πà‡∏ß‡∏¢"""
    print("=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πà‡∏ß‡∏¢ (Simple Test) ===")
    print(f"‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ import ‡πÅ‡∏•‡∏∞ validation
    try:
        from ui_rc_recbeamcal_improved import ModernInputValidator
        print("‚úÖ import ModernInputValidator ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ validation ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà
        print("\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ validation ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà:")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ validate loading
        test_cases = [
            (15.0, 8.0, True, "‡∏Ñ‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥"),
            (10000, 5000, True, "‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ"),
            (10001, 5001, False, "‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î (‡∏ï‡∏±‡∏ô-‡πÄ‡∏°‡∏ï‡∏£/‡∏ï‡∏±‡∏ô)")
        ]
        
        for moment, shear, expected, description in test_cases:
            is_valid, message = ModernInputValidator.validate_loading(str(moment), str(shear))
            status = "‚úÖ" if is_valid == expected else "‚ùå"
            print(f"  {status} {description}: moment={moment}, shear={shear}")
            if not is_valid:
                print(f"      ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: {message}")
        
        print("\nüìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° validation:")
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà
        _, msg1 = ModernInputValidator.validate_loading("15000", "8")
        _, msg2 = ModernInputValidator.validate_loading("15", "8000")
        
        if "‡∏ï‡∏±‡∏ô-‡πÄ‡∏°‡∏ï‡∏£" in msg1:
            print("  ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° validation ‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢ '‡∏ï‡∏±‡∏ô-‡πÄ‡∏°‡∏ï‡∏£'")
        else:
            print("  ‚ùå ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° validation ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢ '‡∏ï‡∏±‡∏ô-‡πÄ‡∏°‡∏ï‡∏£'")
        
        if "‡∏ï‡∏±‡∏ô" in msg2 and "‡∏ï‡∏±‡∏ô-‡πÄ‡∏°‡∏ï‡∏£" not in msg2:
            print("  ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° validation ‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢ '‡∏ï‡∏±‡∏ô' (‡πÅ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ô-‡πÄ‡∏°‡∏ï‡∏£)")
        else:
            print("  ‚ùå ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° validation ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢ '‡∏ï‡∏±‡∏ô' ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô validation test: {e}")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå UI
    try:
        print("\nüìÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå UI:")
        ui_file = "ui_rc_recbeamcal_improved.py"
        
        with open(ui_file, 'r', encoding='utf-8') as f:
            ui_content = f.read()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏ô UI
        ui_checks = [
            ('‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå Mu (‡∏ï‡∏±‡∏ô-‡πÄ‡∏°‡∏ï‡∏£)', '‡∏õ‡πâ‡∏≤‡∏¢‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå'),
            ('‡πÅ‡∏£‡∏á‡πÄ‡∏â‡∏∑‡∏≠‡∏ô Vu (‡∏ï‡∏±‡∏ô)', '‡∏õ‡πâ‡∏≤‡∏¢‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡πÅ‡∏£‡∏á‡πÄ‡∏â‡∏∑‡∏≠‡∏ô'),
            ('10,000 ‡∏ï‡∏±‡∏ô-‡πÄ‡∏°‡∏ï‡∏£', '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° validation ‡πÇ‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå'),
            ('5,000 ‡∏ï‡∏±‡∏ô', '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° validation ‡πÅ‡∏£‡∏á‡πÄ‡∏â‡∏∑‡∏≠‡∏ô')
        ]
        
        for check_text, description in ui_checks:
            if check_text in ui_content:
                print(f"  ‚úÖ {description}: ‡∏û‡∏ö '{check_text}'")
            else:
                print(f"  ‚ùå {description}: ‡πÑ‡∏°‡πà‡∏û‡∏ö '{check_text}'")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ
        old_units = [
            ('tf-m', '‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏Å‡πà‡∏≤ tf-m'),
            ('tf)', '‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏Å‡πà‡∏≤ tf (‡πÉ‡∏ô‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö)')
        ]
        
        print("\nüö´ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ô UI:")
        for old_unit, description in old_units:
            if old_unit in ui_content:
                print(f"  ‚ö†Ô∏è {description}: ‡∏¢‡∏±‡∏á‡∏û‡∏ö '{old_unit}' ‡∏≠‡∏¢‡∏π‡πà")
            else:
                print(f"  ‚úÖ {description}: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
                
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå UI: {e}")
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å
    try:
        print("\nüìÑ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å:")
        main_file = "demo_improved_gui.py"
        
        with open(main_file, 'r', encoding='utf-8') as f:
            main_content = f.read()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏ô markdown report
        markdown_checks = [
            ('‡∏Ñ‡πà‡∏≤ Œ≤1 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏£‡∏µ‡∏ï', '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Œ≤‚ÇÅ ‡πÄ‡∏õ‡πá‡∏ô Œ≤1'),
            ('‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡πÄ‡∏´‡∏•‡πá‡∏Å‡∏£‡∏±‡∏ö‡πÅ‡∏£‡∏á‡∏î‡∏∂‡∏á', '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Œµs'),
            ('‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏π‡∏õ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î', '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Œµt'),
            ('‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡∏ì‡∏•‡∏î‡∏Å‡∏≥‡∏•‡∏±‡∏á', '‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ œÜ ‡πÉ‡∏´‡∏°‡πà')
        ]
        
        for check_text, description in markdown_checks:
            if check_text in main_content:
                print(f"  ‚úÖ {description}: ‡∏û‡∏ö '{check_text}'")
            else:
                print(f"  ‚ùå {description}: ‡πÑ‡∏°‡πà‡∏û‡∏ö '{check_text}'")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÄ‡∏Å‡πà‡∏≤
        old_symbols = [
            ('Œ≤‚ÇÅ', '‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÄ‡∏Å‡πà‡∏≤ Œ≤‚ÇÅ'),
            ('Œµs = ‡∏Ñ‡πà‡∏≤ strain', '‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏Å‡πà‡∏≤ Œµs'),
            ('Œµt = ‡∏Ñ‡πà‡∏≤ strain', '‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏Å‡πà‡∏≤ Œµt')
        ]
        
        print("\nüö´ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å:")
        for old_symbol, description in old_symbols:
            if old_symbol in main_content:
                print(f"  ‚ö†Ô∏è {description}: ‡∏¢‡∏±‡∏á‡∏û‡∏ö '{old_symbol}' ‡∏≠‡∏¢‡∏π‡πà")
            else:
                print(f"  ‚úÖ {description}: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
                
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å: {e}")
    
    print("\nüéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
    print("  ‚úÖ ‡πÑ‡∏ü‡∏•‡πå UI ‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà: ‡∏ï‡∏±‡∏ô-‡πÄ‡∏°‡∏ï‡∏£, ‡∏ï‡∏±‡∏ô")
    print("  ‚úÖ ‡∏Å‡∏≤‡∏£ validation ‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÉ‡∏´‡∏°‡πà")
    print("  ‚úÖ ‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÅ‡∏•‡πâ‡∏ß")
    print("  ‚úÖ ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢")
    
    print("\n=== ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ===")

if __name__ == "__main__":
    test_symbol_fixes()
